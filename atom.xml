<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-01-21T03:56:57.560Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/%E7%94%B5%E5%AD%90%E4%B9%A6%E5%88%B6%E4%BD%9C%E7%88%AC%E5%8F%96/"/>
    <id>http://yoursite.com/2018/01/21/电子书制作爬取/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<p>博客：<a href="http://abirdcfly.github.io/2016/03/07/calibre2mobi/" target="_blank" rel="noopener">http://abirdcfly.github.io/2016/03/07/calibre2mobi/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;博客：&lt;a href=&quot;http://abirdcfly.github.io/2016/03/07/calibre2mobi/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://abirdcfly.github.io/2016/03/07/cal
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/%E4%BF%AE%E5%A4%8Dperl%E7%9A%84locale%E5%BC%82%E5%B8%B8/"/>
    <id>http://yoursite.com/2018/01/21/修复perl的locale异常/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<p>问题：<br>perl: warning: Falling back to the standard locale (“C”).<br>perl: warning: Setting locale failed.<br>sh: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)<br>sh: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)</p><p>解决方法：<br>locale-gen en_US en_US.UTF-8<br>dpkg-reconfigure locales<br>locale<br>export LC_ALL=en_US.UTF-8</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;问题：&lt;br&gt;perl: warning: Falling back to the standard locale (“C”).&lt;br&gt;perl: warning: Setting locale failed.&lt;br&gt;sh: warning: setlocale: LC_A
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/pip%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/01/21/pip命令/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<p>#基础用法</p><p>##1. 安装指定版本的包</p><pre><code>pip3 install docker-py==1.8.1</code></pre><p>##2. 使用代理proxy</p><pre><code>pip3 --proxy=http://username:password@proxy.com:8080 install docker-py==1.8.1</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#基础用法&lt;/p&gt;
&lt;p&gt;##1. 安装指定版本的包&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 install docker-py==1.8.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##2. 使用代理proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip3 --proxy=http:/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/nginx%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2018/01/21/nginx相关/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>访问nginx搭建的网站时，报403 forbidden错误的原因。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>第一，是因为缺少index.html或者index.php等<br>第二，是因为没有权限。</p><p>参考：<br><a href="http://blog.51yip.com/apachenginx/1512.html" target="_blank" rel="noopener">http://blog.51yip.com/apachenginx/1512.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;访问nginx搭建的网站时，报403 forbidden错误的原因。&lt;/p&gt;
&lt;h1 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/knowledge_topology/"/>
    <id>http://yoursite.com/2018/01/21/knowledge_topology/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<p>c语言测试套框架：<a href="https://libcheck.github.io/check/" target="_blank" rel="noopener">https://libcheck.github.io/check/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;c语言测试套框架：&lt;a href=&quot;https://libcheck.github.io/check/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://libcheck.github.io/check/&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/ip%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9Cdocker%E5%AE%B9%E5%99%A8netns/"/>
    <id>http://yoursite.com/2018/01/21/ip命令操作docker容器netns/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<p>在host上，操作容器的网络设备</p><pre><code>1. 需要查到容器的进程id==cpid，可以通过----cpid=$(docker inspect --format &apos;{{.State.Pid}}&apos; $1)2. 需要把容器的netns挂到ip命令能操作的netns中-----ln -s &quot;/proc/$cpid/ns/net&quot; &quot;/var/run/netns/$cpid&quot;3. 查看容器中所有的网络设备以及配置信息：ip netns exec $cpid ip a4. 查看容器中网络设备的类型信息：ip netns exec $cpid ethtool &quot;driver name（如eth0）&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在host上，操作容器的网络设备&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 需要查到容器的进程id==cpid，可以通过----cpid=$(docker inspect --format &amp;apos;{{.State.Pid}}&amp;apos; $1)
2. 需要把容器的netns
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/ip%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/01/21/ip命令/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<p>##1. use ip to up/down interface:<br>Usage:</p><pre><code>ip link set dev &lt;interface&gt; upip link set dev &lt;interface&gt; down</code></pre><p>Example:</p><pre><code>ip link set dev eth0 upip link set dev eth0 down</code></pre><p>##2. use ip add veth pair:<br>Usage:</p><pre><code>ip link add &lt;interface nameA&gt; type veth peer name &lt;interface nameB&gt;</code></pre><p>Example:</p><pre><code>ip link add veth0 type veth peer name veth1</code></pre><p>##3. set veth to a netns:<br>Usage:</p><pre><code>ip link set &lt;interface&gt; netns &lt;netnamespace&gt;</code></pre><p>Example:</p><pre><code>ip netns add hello_test  //创建一个名为hell_test的netns（网络命名空间）ip link set veth1 netns hello_test</code></pre><p>##4. rename interface<br>Usage:</p><pre><code>ip link set vethA name vethB</code></pre><p>Example:</p><pre><code>ip link set vethA downip link set vethA name vethBip link set vethB up</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##1. use ip to up/down interface:&lt;br&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ip link set dev &amp;lt;interface&amp;gt; up
ip link set dev &amp;lt;interface&amp;gt; down
&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/README/"/>
    <id>http://yoursite.com/2018/01/21/README/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="All-Notes"><a href="#All-Notes" class="headerlink" title="All Notes"></a>All Notes</h1><ul><li>Docker study notes</li><li>Linux study notes</li><li>Some Software install log</li><li>Some Bug</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;All-Notes&quot;&gt;&lt;a href=&quot;#All-Notes&quot; class=&quot;headerlink&quot; title=&quot;All Notes&quot;&gt;&lt;/a&gt;All Notes&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Docker study notes&lt;/li&gt;
&lt;li&gt;Linux st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/01/21/git_usages/"/>
    <id>http://yoursite.com/2018/01/21/git_usages/</id>
    <published>2018-01-21T03:56:57.560Z</published>
    <updated>2018-01-21T03:56:57.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git用法汇总"><a href="#Git用法汇总" class="headerlink" title="Git用法汇总"></a>Git用法汇总</h1><h2 id="Git命令自动补全"><a href="#Git命令自动补全" class="headerlink" title="Git命令自动补全"></a>Git命令自动补全</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/bash_completion.d/git</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">source</span> /usr/share/bash-completion/completions/git</span><br></pre></td></tr></table></figure><p>可以添加到~/.bashrc</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git用法汇总&quot;&gt;&lt;a href=&quot;#Git用法汇总&quot; class=&quot;headerlink&quot; title=&quot;Git用法汇总&quot;&gt;&lt;/a&gt;Git用法汇总&lt;/h1&gt;&lt;h2 id=&quot;Git命令自动补全&quot;&gt;&lt;a href=&quot;#Git命令自动补全&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/21/hello-world/"/>
    <id>http://yoursite.com/2018/01/21/hello-world/</id>
    <published>2018-01-21T03:49:38.951Z</published>
    <updated>2018-01-21T03:49:38.951Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>legacy_va_layout设置大堆</title>
    <link href="http://yoursite.com/2017/06/02/linux_kernel_bigheap/"/>
    <id>http://yoursite.com/2017/06/02/linux_kernel_bigheap/</id>
    <published>2017-06-02T16:19:29.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><p>设置/proc/sys/vm/legacy_va_layout为0，调整进程地址空间的heap增长方向为从上往下。<br>这样可以使得heap的上限超过2G。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0 ----------------------------------------------------------------------------------------- 3G -------- 4G</span><br><span class="line">保留 | 代码段 | 数据段 | BSS段 | 堆-增长方向向上 | 内存映射 | 栈-增长方向向下 | 命令行参数 | 环境变量    内核段</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/proc/sys/vm/legacy_va_layout (since Linux 2.6.9)</span><br><span class="line">              If nonzero, this disables the new 32-bit memory-mapping</span><br><span class="line">              layout; the kernel will use the legacy (2.4) layout for all</span><br><span class="line">              processes.</span><br></pre></td></tr></table></figure><p>修改heap增长方向代码（以linux4.1的arm为例）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void arch_pick_mmap_layout(struct mm_struct *mm)</span><br><span class="line">&#123;</span><br><span class="line">unsigned long random_factor = 0UL;</span><br><span class="line"></span><br><span class="line">if (current-&gt;flags &amp; PF_RANDOMIZE)</span><br><span class="line">random_factor = arch_mmap_rnd();</span><br><span class="line"></span><br><span class="line">if (mmap_is_legacy()) &#123;  //获取legacy_va_layout的值，非零使用正常模式</span><br><span class="line">mm-&gt;mmap_base = TASK_UNMAPPED_BASE + random_factor;</span><br><span class="line">mm-&gt;get_unmapped_area = arch_get_unmapped_area;</span><br><span class="line">&#125; else &#123;  //为零，使用自上向下的模式</span><br><span class="line">mm-&gt;mmap_base = mmap_base(random_factor);</span><br><span class="line">mm-&gt;get_unmapped_area = arch_get_unmapped_area_topdown;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;设置/proc/sys/vm/legacy_va_layout为0，调整进程地址空间的heap增长方向为从上往下。&lt;br&gt;这样可以使得heap的上限超过2G。&lt;/p&gt;
&lt;figure class=&quot;highlight p
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="bigheap" scheme="http://yoursite.com/tags/bigheap/"/>
    
      <category term="legacy_va_layout" scheme="http://yoursite.com/tags/legacy-va-layout/"/>
    
  </entry>
  
  <entry>
    <title>watchdog分析</title>
    <link href="http://yoursite.com/2017/06/02/linux_scheduling_softlockup&amp;hardlockup/"/>
    <id>http://yoursite.com/2017/06/02/linux_scheduling_softlockup&amp;hardlockup/</id>
    <published>2017-06-02T16:19:29.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="softlockup和hardlockup含义"><a href="#softlockup和hardlockup含义" class="headerlink" title="softlockup和hardlockup含义"></a>softlockup和hardlockup含义</h2><h3 id="softlockup"><a href="#softlockup" class="headerlink" title="softlockup"></a>softlockup</h3><p>内核在内核模式loop超过get_softlockup_thresh()获取的阈值时间，导致其他任务没有机会运行的bug，称为”softlockup”。<br>简单来说，就是抢占被关闭时间超过阈值，导致其他进程无法调度。</p><h3 id="hardlockup"><a href="#hardlockup" class="headerlink" title="hardlockup"></a>hardlockup</h3><p>CPU在内核模式loop时间超过hw_nmi_get_sample_period函数获取的阈值时间，导致其他中断不能运行的bug，称为”hardlockup”。<br>简单来说，就是中断被关闭时间超过阈值，导致其他中断无法运行。</p><h2 id="softlockup注册和触发流程"><a href="#softlockup注册和触发流程" class="headerlink" title="softlockup注册和触发流程"></a>softlockup注册和触发流程</h2><h3 id="基于proc文件系统的watchdog流程"><a href="#基于proc文件系统的watchdog流程" class="headerlink" title="基于proc文件系统的watchdog流程"></a>基于proc文件系统的watchdog流程</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proc_watchdog_update 更新watchdog状态，如果开启了watchdog，触发开狗流程</span><br><span class="line">  --&gt; watchdog_enable_all_cpus 打开所有cpu的狗</span><br><span class="line">    --&gt; smpboot_register_percpu_thread(&amp;watchdog_threads) 创建启动所有CPU上面的hotplug相关线程</span><br><span class="line">        --&gt; __smpboot_create_thread 创建线程，线程执行的函数是smpboot_thread_fn</span><br><span class="line">          --&gt; smpboot_thread_fn 开始会注册调用watchdog_threads的setup（就是watchdog_enable），正常流程会不断的执行watchdog_threads的thread_fn</span><br><span class="line">            --&gt; watchdog_enabled 会启动一个hrtimer的定时器，触发的回调函数是watchdog_timer_fn</span><br><span class="line">              --&gt; watchdog_timer_fn 根据is_softlockup判断是否发生softlockup</span><br></pre></td></tr></table></figure><p>watchdog函数就是喂狗，保证不出现softlockup，这里不需要关注太详细。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static void watchdog(unsigned int cpu)</span><br><span class="line">&#123;</span><br><span class="line">__this_cpu_write(soft_lockup_hrtimer_cnt,</span><br><span class="line"> __this_cpu_read(hrtimer_interrupts));</span><br><span class="line">__touch_watchdog();</span><br><span class="line"></span><br><span class="line">if (!(watchdog_enabled &amp; NMI_WATCHDOG_ENABLED))</span><br><span class="line">watchdog_nmi_disable(cpu);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内核初始化时的流程"><a href="#内核初始化时的流程" class="headerlink" title="内核初始化时的流程"></a>内核初始化时的流程</h3><p>tick的方式，注册watchdog。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">kernel_init 内核初始化</span><br><span class="line">  --&gt; kernel_init_freeable </span><br><span class="line">    --&gt; lockup_detector_init 如果开狗了会执行watchdog_enable_all_cpus；如果开启了CONFIG_TICKLESS，会注册tick_notify。</span><br><span class="line">      --&gt; watchdog_enable_all_cpus 后续流程和proc的一致，参考上面的分析</span><br><span class="line">      --&gt; register_tick_notifier 注册回调函数softlockup_tickonoff_callback</span><br><span class="line">        --&gt; softlockup_tickonoff_callback 注册回调函数softlockup_tick_onoff</span><br><span class="line">          --&gt; softlockup_tick_onoff 如果tick是打开的，会启动一个hrtimer，定期执行watchdog_timer_fn函数</span><br><span class="line">            --&gt; watchdog_timer_fn 和上面的流程一致了</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;softlockup和hardlockup含义&quot;&gt;&lt;a href=&quot;#softlockup和hardlockup含义&quot; class=&quot;headerlink&quot; title=&quot;softlockup和hardlock
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="scheduling" scheme="http://yoursite.com/tags/scheduling/"/>
    
      <category term="watchdog" scheme="http://yoursite.com/tags/watchdog/"/>
    
      <category term="softlockup" scheme="http://yoursite.com/tags/softlockup/"/>
    
      <category term="hardlockup" scheme="http://yoursite.com/tags/hardlockup/"/>
    
  </entry>
  
  <entry>
    <title>sqlite数据库修改失败</title>
    <link href="http://yoursite.com/2017/05/07/sqlite_can_not_write_error/"/>
    <id>http://yoursite.com/2017/05/07/sqlite_can_not_write_error/</id>
    <published>2017-05-07T22:32:21.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>用sqlite data browser 执行update命令，报错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unable to open database file</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>sqlite库在对数据库进行操作时（本人估计是写操作），会在数据库的当前文件夹下创建一个临时文件，当操作结束时，该临时文件将被删除。 而远程用户一般不具备有对临时文件足够的权限,<br>所以会造成 无法打开、写或者删除临时文件。解决的方法就是递归地（加-R）将数据库所在文件夹设置为任何用户都有可读可写可删的权限。假如sqlite数据库路径为/database/， 则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 755 /database/</span><br></pre></td></tr></table></figure><p>参考文章：<a href="http://blog.csdn.net/benthy2/article/details/17901821" target="_blank" rel="noopener">http://blog.csdn.net/benthy2/article/details/17901821</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;用sqlite data browser 执行update命令，报错误：&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="sqlite" scheme="http://yoursite.com/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>基于docker容器的wordpress迁移</title>
    <link href="http://yoursite.com/2017/05/07/docker_wordpress_migrate/"/>
    <id>http://yoursite.com/2017/05/07/docker_wordpress_migrate/</id>
    <published>2017-05-07T22:31:33.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>我的wordpress是用sqlite作为数据库的<br>wordpress是运行在docker容器里面的<br>网站的所有数据都有备份<br>安装docker<br>按照“基于centos搭建wordpress的docker镜像”制作对应的docker镜像（假设名字为wordpress_sqlite）<br>拷贝备份数据到新机器的/workspace/wordpress/blogs/，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run –privileged -itd -p 8080:80 -v /workspace/wordpress/blogs/:/var/www/html wordpress_sqlite bash -l -c “/sbin/init”</span><br></pre></td></tr></table></figure><p>此时，网站应该可以正常运行了。</p><p>注意：如果你修改了网站的域名，那么需要对sqlite数据库的数据进行修改。</p><p>##问题</p><p>当迁移的机器域名变化时，需要怎么修改网站配置。</p><p>准备环境：安装sqlite3，sqlitebrowser</p><p>最重要的就是需要修改两个配置：</p><p>WordPress地址（URL）—-对应wp_options的 home<br>站点地址（URL）—-对应wp_options的 siteurl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE wp_options SET option_value = replace( option_value, ‘http://www.old.com’, ‘http://www.new.com’ ) WHERE option_name = ‘home’ OR option_name = ‘siteurl’;</span><br><span class="line">UPDATE wp_posts SET post_content = replace( post_content, ‘http://www.old.com’, ‘http://www.new.com’ ) ;</span><br><span class="line">UPDATE wp_posts SET guid = replace( guid, ‘http://www.old.com’, ‘http://www.new.com’ ) ;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>第一，参考文章“sqlite数据库不能修改”</li><li>第二，参考文章“wordpress登陆跳转卡住”</li><li>第三，sqlitebrowser在update之后，需要执行“write changes”按钮，才能把修改写入到数据库文件中。</li></ul><p>参考文章：</p><ul><li><a href="http://www.2zzt.com/jcandcj/5883.html" target="_blank" rel="noopener">http://www.2zzt.com/jcandcj/5883.html</a></li><li><a href="http://jingyan.baidu.com/article/ff4116258f144012e48237a7.html" target="_blank" rel="noopener">http://jingyan.baidu.com/article/ff4116258f144012e48237a7.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前提&quot;&gt;&lt;a href=&quot;#前提&quot; class=&quot;headerlink&quot; title=&quot;前提&quot;&gt;&lt;/a&gt;前提&lt;/h2&gt;&lt;p&gt;我的wordpress是用sqlite作为数据库的&lt;br&gt;wordpress是运行在d
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="wordpress" scheme="http://yoursite.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>wordpress登陆跳转卡住</title>
    <link href="http://yoursite.com/2017/05/07/wordpress_login_fail/"/>
    <id>http://yoursite.com/2017/05/07/wordpress_login_fail/</id>
    <published>2017-05-07T22:30:48.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>以www.example.com域名为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.example.com/wp-login.php?redirect_to=www.example.com/wp-admin%2F&amp;reauth=1</span><br></pre></td></tr></table></figure><p>用户名和密码都是正确的，在redirect的时候，卡住不动。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>这是由于wp-admin文件夹的权限问题导致的，可以修改该文件夹的访问权限，“chmod -R 755 wp-admin”</p><p>参考文章：<a href="http://wordpress.stackexchange.com/questions/113161/wp-admin-url-doesnt-allow-to-login-and-redirects-to-same-page" target="_blank" rel="noopener">http://wordpress.stackexchange.com/questions/113161/wp-admin-url-doesnt-allow-to-login-and-redirects-to-same-page</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;以www.example.com域名为例&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
    
      <category term="wordpress" scheme="http://yoursite.com/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>golang strings.Join一个字符串的情况</title>
    <link href="http://yoursite.com/2017/05/07/golang_string_join_usage/"/>
    <id>http://yoursite.com/2017/05/07/golang_string_join_usage/</id>
    <published>2017-05-07T22:28:28.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rt := strings.Join([]string&#123;“help”&#125;, “-“)</span><br><span class="line">fmt.Println(rt)</span><br><span class="line">return</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>此时help后面不会加上“-”，只会打印一个“help”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Git代理配置及常见错误解决办法</title>
    <link href="http://yoursite.com/2017/05/07/git_use_error_fix/"/>
    <id>http://yoursite.com/2017/05/07/git_use_error_fix/</id>
    <published>2017-05-07T22:28:28.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config –global http.proxy http://name:password@proxyhk.huawei.com:8080</span><br><span class="line"></span><br><span class="line">git config –global https.proxy http://name:password@proxyhk.huawei.com:8080</span><br></pre></td></tr></table></figure><p>比如这种错误的时候fatal: unable to access ‘<a href="https://github.com/kubernetes/kubernetes.git/’" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes.git/’</a>: server certificate verification failed. CAfile: /etc/ssl/certs/ca-certificates.crt CRLfile: none</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config –global http.sslverify <span class="literal">false</span> （解决证书验证问题）</span><br><span class="line"></span><br><span class="line">git config –global https.sslverify <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注：不过这样并没有解决你证书的问题，只是跳过了而已。</p><h2 id="Ubuntu在clone大的项目异常"><a href="#Ubuntu在clone大的项目异常" class="headerlink" title="Ubuntu在clone大的项目异常"></a>Ubuntu在clone大的项目异常</h2><p>可能会出下面的错误:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: gnutls_handshake() failed: A TLS packet with unexpected length was received. while accessing …</span><br><span class="line">fatal: HTTP request failed</span><br></pre></td></tr></table></figure><p>这就需要你自己重新编译安装git了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential fakeroot dpkg-dev libcurl4-openssl-dev</span><br><span class="line">sudo apt-get build-dep git</span><br><span class="line">mkdir ~/git-openssl</span><br><span class="line"><span class="built_in">cd</span> ~/git-openssl</span><br><span class="line">apt-get <span class="built_in">source</span> git</span><br><span class="line">dpkg-source -x git_1.7.9.5-1.dsc</span><br><span class="line"><span class="built_in">cd</span> git-1.7.9.5</span><br></pre></td></tr></table></figure><p>修改“debian/control”文件，把所有的“libcurl4-gnutls-dev” 替换成“libcurl4-openssl-dev”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-buildpackage -rfakeroot -b</span><br></pre></td></tr></table></figure><p>安装对应的版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i386: sudo dpkg -i ../git_1.7.9.5-1_i386.deb</span><br><span class="line"></span><br><span class="line">x86_64: sudo dpkg -i ../git_1.7.9.5-1_amd64.deb</span><br></pre></td></tr></table></figure><p>注：git版本号，注意修改为你下载的对应版本号</p><p>参考文章：</p><p><a href="http://askubuntu.com/questions/186847/error-gnutls-handshake-failed-when-connecting-to-https-servers/187199#187199" target="_blank" rel="noopener">http://askubuntu.com/questions/186847/error-gnutls-handshake-failed-when-connecting-to-https-servers/187199#187199</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;配置代理&quot;&gt;&lt;a href=&quot;#配置代理&quot; class=&quot;headerlink&quot; title=&quot;配置代理&quot;&gt;&lt;/a&gt;配置代理&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Ubuntu" scheme="http://yoursite.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Docker代理配置</title>
    <link href="http://yoursite.com/2017/05/07/docker_set_proxy/"/>
    <id>http://yoursite.com/2017/05/07/docker_set_proxy/</id>
    <published>2017-05-07T22:18:28.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="非systemd情况下"><a href="#非systemd情况下" class="headerlink" title="非systemd情况下"></a>非systemd情况下</h2><p>直接修改/etc/default/docker文件就行（Ubuntu下service启动docker，属于非systemd模式）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=xxxxxx</span><br><span class="line"><span class="built_in">export</span> https_proxy=xxxxxx</span><br></pre></td></tr></table></figure><h2 id="systemd模式下"><a href="#systemd模式下" class="headerlink" title="systemd模式下"></a>systemd模式下</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/systemd/system/docker.service.d</span><br><span class="line">touch /etc/systemd/system/docker.service.d/http-proxy.conf</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Service] Environment=”HTTP_PROXY=http://proxy.example.com:80/”</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Environment=”HTTP_PROXY=http://proxy.example.com:80/” “NO_PROXY=localhost,127.0.0.1,docker-registry.somecorporation.com”</span><br></pre></td></tr></table></figure><p>刷新配置：sudo systemctl daemon-reload</p><p>验证配置是否成功：systemctl show –property=Environment docker</p><p>重启docker服务：sudo systemctl restart docker</p><p>参考文章</p><p><a href="https://docs.docker.com/engine/admin/systemd/" target="_blank" rel="noopener">https://docs.docker.com/engine/admin/systemd/</a></p><p><a href="http://www.jianshu.com/p/2e0c9ed5433d" target="_blank" rel="noopener">http://www.jianshu.com/p/2e0c9ed5433d</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;非systemd情况下&quot;&gt;&lt;a href=&quot;#非systemd情况下&quot; class=&quot;headerlink&quot; title=&quot;非systemd情况下&quot;&gt;&lt;/a&gt;非systemd情况下&lt;/h2&gt;&lt;p&gt;直接修改/et
      
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>获取qemu创建的虚拟机的IP地址</title>
    <link href="http://yoursite.com/2017/05/07/qemu_get_vm_ip/"/>
    <id>http://yoursite.com/2017/05/07/qemu_get_vm_ip/</id>
    <published>2017-05-07T22:08:28.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="先用virsh-net-list获取虚拟机的网络列表"><a href="#先用virsh-net-list获取虚拟机的网络列表" class="headerlink" title="先用virsh net-list获取虚拟机的网络列表"></a>先用virsh net-list获取虚拟机的网络列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vms]<span class="comment"># virsh net-list</span></span><br><span class="line">Name State Autostart Persistent</span><br><span class="line">———————————————————-</span><br><span class="line">default active yes yes</span><br></pre></td></tr></table></figure><h2 id="然后获取IP的分配列表"><a href="#然后获取IP的分配列表" class="headerlink" title="然后获取IP的分配列表"></a>然后获取IP的分配列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost vms]<span class="comment"># virsh net-dhcp-leases default</span></span><br><span class="line">Expiry Time MAC address Protocol IP address Hostname Client ID or DUID</span><br><span class="line">——————————————————————————————————————-</span><br><span class="line">2016-09-22 21:08:03 52:54:00:00:00:12 ipv4 192.168.122.7/24 rtos –</span><br><span class="line">2016-09-22 21:08:23 52:54:00:00:00:42 ipv4 192.168.122.226/24 rtos –</span><br><span class="line">2016-09-22 21:08:35 52:54:00:00:00:62 ipv4 192.168.122.5/24 rtos –</span><br></pre></td></tr></table></figure><h2 id="获取虚拟机的列表"><a href="#获取虚拟机的列表" class="headerlink" title="获取虚拟机的列表"></a>获取虚拟机的列表</h2><p>[root@localhost vms]# virsh list<br>Id Name State<br>—————————————————-<br>12 main running<br>13 slaver1 running<br>14 slaver2 running</p><p>注：virsh net-dhcp-leases 网络名：会把该网络上分配出去的IP地址显示出来</p><h2 id="获取制定虚拟机的IP"><a href="#获取制定虚拟机的IP" class="headerlink" title="获取制定虚拟机的IP"></a>获取制定虚拟机的IP</h2><p>virsh edit vmID可以看到虚拟机的MAC地址，然后到第二步中找到对应的IP。</p><p>如果有更好的办法可以联系我：duguhaotian@gmail.com</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;先用virsh-net-list获取虚拟机的网络列表&quot;&gt;&lt;a href=&quot;#先用virsh-net-list获取虚拟机的网络列表&quot; class=&quot;headerlink&quot; title=&quot;先用virsh net-l
      
    
    </summary>
    
    
      <category term="qemu" scheme="http://yoursite.com/tags/qemu/"/>
    
      <category term="虚拟机" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 qemu虚拟机安装</title>
    <link href="http://yoursite.com/2017/05/07/install_vm_on_centos7/"/>
    <id>http://yoursite.com/2017/05/07/install_vm_on_centos7/</id>
    <published>2017-05-07T19:08:28.000Z</published>
    <updated>2018-01-21T04:16:50.470Z</updated>
    
    <content type="html"><![CDATA[<hr><p>作者： 耗子007</p><hr><h2 id="需要的材料"><a href="#需要的材料" class="headerlink" title="需要的材料"></a>需要的材料</h2><h3 id="qemu-kvm"><a href="#qemu-kvm" class="headerlink" title="qemu-kvm"></a>qemu-kvm</h3><p>能运行的qemu虚拟机镜像文件（如果你的机器是远端服务器，没办法使用virt-view等图形界面的话）<br>已有的qemu系统镜像安装了openssh-server端<br>安装qemu相关软件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install qemu-kvm qemu-img virt-manager libvirt libvirt-python libvirt-client virt-install virt-viewer</span><br></pre></td></tr></table></figure></p><p>准备可用的qemu虚拟机镜像文件<br>条件：有一台PC机器，安装好了qemu</p><h3 id="新建磁盘文件"><a href="#新建磁盘文件" class="headerlink" title="新建磁盘文件"></a>新建磁盘文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qemu-img create -f qcow2 /root/my.qcow2 20G</span><br></pre></td></tr></table></figure><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install -r 1024 –accelerate -n <span class="built_in">test</span> -f /root/my.qcow2 –cdrom mini.iso –graphics=vnc,listen=0.0.0.0</span><br></pre></td></tr></table></figure><p>注：mini.iso是ubuntu的最小安装盘，你可以用其他的代替</p><p>图形界面正常的安装流程</p><p>然后进入虚拟机安装openssh-server端，打开root的ssh登录权限。</p><p>此时，我们安装的虚拟机系统的所有文件都在/root/my.qcow2里面。所以，我们把它拷贝到你的centos上面，然后可以直接用这个镜像文件创建虚拟机了。</p><h2 id="启动虚拟机的xml配置文件示例"><a href="#启动虚拟机的xml配置文件示例" class="headerlink" title="启动虚拟机的xml配置文件示例"></a>启动虚拟机的xml配置文件示例</h2><p>把自己的配置写到test.xml文件，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;domain type=’kvm’&gt;</span><br><span class="line">&lt;name&gt;test&lt;/name&gt;</span><br><span class="line">&lt;memory unit=’MiB’&gt;1024&lt;/memory&gt;</span><br><span class="line">&lt;currentMemory unit=’MiB’&gt;1024&lt;/currentMemory&gt;</span><br><span class="line">&lt;vcpu placement=’static’&gt;1&lt;/vcpu&gt;</span><br><span class="line">&lt;os&gt;</span><br><span class="line">&lt;type arch=’x86_64′ machine=’pc’&gt;hvm&lt;/type&gt;</span><br><span class="line">&lt;boot dev=’cdrom’/&gt;</span><br><span class="line">&lt;boot dev=’hd’/&gt;</span><br><span class="line">&lt;/os&gt;</span><br><span class="line">&lt;features&gt;</span><br><span class="line">&lt;acpi/&gt;</span><br><span class="line">&lt;apic/&gt;</span><br><span class="line">&lt;pae/&gt;</span><br><span class="line">&lt;/features&gt;</span><br><span class="line">&lt;clock offset=’utc’/&gt;</span><br><span class="line">&lt;on_poweroff&gt;destroy&lt;/on_poweroff&gt;</span><br><span class="line">&lt;on_reboot&gt;restart&lt;/on_reboot&gt;</span><br><span class="line">&lt;on_crash&gt;restart&lt;/on_crash&gt;</span><br><span class="line">&lt;devices&gt;</span><br><span class="line">&lt;emulator&gt;/usr/libexec/qemu-kvm&lt;/emulator&gt;</span><br><span class="line">&lt;disk type=’file’ device=’disk’&gt;</span><br><span class="line">&lt;driver name=’qemu’ type=’qcow2’/&gt;</span><br><span class="line">&lt;source file=’/root/guest.qcow2’/&gt;</span><br><span class="line">&lt;target dev=’vda’ bus=’virtio’/&gt;</span><br><span class="line">&lt;/disk&gt;</span><br><span class="line">&lt;controller type=’usb’ index=’0′&gt;</span><br><span class="line">&lt;/controller&gt;</span><br><span class="line">&lt;interface type=’network’&gt;</span><br><span class="line">&lt;mac address=’52:54:00:00:00:12’/&gt;</span><br><span class="line">&lt;source network=’default’/&gt;</span><br><span class="line">&lt;model type=’virtio’/&gt;</span><br><span class="line">&lt;/interface&gt;</span><br><span class="line">&lt;serial type=’pty’&gt;</span><br><span class="line">&lt;target port=’0’/&gt;</span><br><span class="line">&lt;/serial&gt;</span><br><span class="line">&lt;console type=’pty’&gt;</span><br><span class="line">&lt;target type=’serial’ port=’0’/&gt;</span><br><span class="line">&lt;/console&gt;</span><br><span class="line">&lt;channel type=’spicevmc’&gt;</span><br><span class="line">&lt;target type=’virtio’ name=’com.redhat.spice.0’/&gt;</span><br><span class="line">&lt;/channel&gt;</span><br><span class="line">&lt;input type=’tablet’ bus=’usb’/&gt;</span><br><span class="line">&lt;input type=’mouse’ bus=’ps2’/&gt;</span><br><span class="line">&lt;input type=’keyboard’ bus=’ps2’/&gt;</span><br><span class="line">&lt;graphics type=’spice’ autoport=’yes’/&gt;</span><br><span class="line">&lt;sound model=’ich6′&gt;</span><br><span class="line">&lt;/sound&gt;</span><br><span class="line">&lt;video&gt;</span><br><span class="line">&lt;model type=’qxl’ vram=’9216′ heads=’1’/&gt;</span><br><span class="line">&lt;/video&gt;</span><br><span class="line">&lt;redirdev bus=’usb’ type=’spicevmc’&gt;</span><br><span class="line">&lt;/redirdev&gt;</span><br><span class="line">&lt;memballoon model=’virtio’&gt;</span><br><span class="line">&lt;/memballoon&gt;</span><br><span class="line">&lt;/devices&gt;</span><br><span class="line">&lt;/domain&gt;</span><br></pre></td></tr></table></figure><p>注：/usr/libexec/qemu-kvm 其他系统的位置不一样（如，ubuntu是在/user/bin/qemu-system-x86_64）</p><p>然后直接运行virsh create test.xml，此时你就可以通过ssh root@ip到你的虚拟机上了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;作者： 耗子007&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;需要的材料&quot;&gt;&lt;a href=&quot;#需要的材料&quot; class=&quot;headerlink&quot; title=&quot;需要的材料&quot;&gt;&lt;/a&gt;需要的材料&lt;/h2&gt;&lt;h3 id=&quot;qemu-kvm&quot;&gt;&lt;a href=&quot;#qemu-k
      
    
    </summary>
    
    
      <category term="qemu" scheme="http://yoursite.com/tags/qemu/"/>
    
      <category term="虚拟机" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
</feed>
